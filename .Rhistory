reference_area = 20,
back_fore_index = "BIM",
filter = 6,
object_size = "small",
save_image = TRUE,
show_contour = FALSE,
marker = "point",
marker_col = "red",
tolerance = 0.5,
lower_size = 0.02,
# contour_size = 8,
# marker = "id",
marker_size = 4,
fill_hull = TRUE)
View(res)
View(res[["statistics"]])
library(rio)
library(tidyverse)
library(ggridges)
my_theme <-
theme_bw(base_size = 16) +
theme(
panel.grid.minor = element_blank(),
legend.title = element_blank()
)
df_folha <- import("area_foliar.xlsx")
library(rio)
library(tidyverse)
library(ggridges)
my_theme <-
theme_bw(base_size = 16) +
theme(
panel.grid.minor = element_blank(),
legend.title = element_blank()
)
df_folha <- import("area_foliar.xlsx")
setwd("E:/Desktop/UFSC/projetos/pesquisa/desempenho_linhaca/pliman_rbras2022/imgs")
setwd("E:/Desktop/UFSC/projetos/pesquisa/desempenho_linhaca/pliman_rbras2022/imgs")
#| out-width: "100%"
#| code-fold: true
#| code-summary: "Mostrar código"
library(rio)
library(tidyverse)
library(ggridges)
my_theme <-
theme_bw(base_size = 16) +
theme(
panel.grid.minor = element_blank(),
legend.title = element_blank()
)
df_folha <- import("area_foliar.xlsx")
df_vars <-
df_folha |>
select(das, area, length, width) |>
set_names(c("das", "Área (cm2)", "Comprimento (cm)", "Largura (cm)")) |>
pivot_longer(-das)
ggplot(df_vars, aes(x = value, y = factor(das))) +
geom_density_ridges(fill = "steelblue") +
labs() +
facet_wrap(~name, scales = "free") +
labs(x = "Valor mensurado",
y = "Dias após a semeadura") +
my_theme
p1 <-
df_folha |>
filter(das %in% c(42, 100)) |>
ggplot(aes(length, area)) +
geom_point(aes(fill = factor(das)),
color = "black",
shape = 21,
size = 2) +
geom_smooth(method = "lm",
aes(color = factor(das)),
se = FALSE,
size = 2) +
labs(x = "Comprimento (cm)",
y = expression(Área~da~folha~(cm^2))) +
my_theme
p2 <-
df_folha |>
subset(das %in% c(42, 100)) |>
ggplot(aes(width, area)) +
geom_point(aes(fill = factor(das)),
color = "black",
shape = 21,
size = 2) +
geom_smooth(method = "lm",
aes(color = factor(das)),
se = FALSE,
size = 2) +
labs(x = "Largura (cm)",
y = expression(Área~da~folha~(cm^2))) +
my_theme
p3 <-
df_folha |>
subset(das %in% c(42, 100)) |>
ggplot(aes(width, length)) +
geom_point(aes(fill = factor(das)),
color = "black",
shape = 21,
size = 2) +
geom_smooth(method = "lm",
aes(color = factor(das)),
se = FALSE,
size = 2) +
labs(x = "Largura (cm)",
y = "Comprimento (cm)") +
my_theme
library(metan)
arrange_ggplot(p1, p2, p3,
tag_levels = "a",
guides = "collect")
library(rio)
library(tidyverse)
library(ggridges)
my_theme <-
theme_bw(base_size = 16) +
theme(
panel.grid.minor = element_blank(),
legend.title = element_blank()
)
df_folha <- import("area_foliar.xlsx")
10663*23
10663*36
?gamem_met
model <- gamem_met(data_ge,
env = ENV,
gen = GEN,
rep = REP,
resp = everything())
knitr::opts_knit$set(root.dir = "E:/Desktop/UFSC/projetos/pesquisa/desempenho_linhaca/pliman_rbras2022/imgs")
setwd("E:/Desktop/UFSC/projetos/pesquisa/desempenho_linhaca/pliman_rbras2022/imgs")
setwd("E:/Desktop/UFSC/projetos/pesquisa/desempenho_linhaca/pliman_rbras2022/imgs")
library(pliman)
img <- image_import("img3.jpg") |> image_vertical()
res <-
analyze_objects(img,
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)", # padrão
fore_ref_index = "B-R",      # padrão
marker = "length",           # plota o comprimento
save_image = TRUE,
filter = 2,
watershed = FALSE)
res <-
analyze_objects(img,
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)", # padrão
fore_ref_index = "B-R",      # padrão
marker = "length",           # plota o comprimento
save_image = TRUE,
marker_size = 5,
filter = 2,
watershed = FALSE)
res <-
analyze_objects(img,
reference = TRUE,
reference_area = 20,
back_fore_index = "R/(G/B)", # padrão
fore_ref_index = "B-R",      # padrão
marker = "length",           # plota o comprimento
save_image = TRUE,
marker_size = 4,
contour_size = 3,
filter = 2,
watershed = FALSE)
image_binary(img, "R/(G/B)")
image_binary(img, "R/(G/B)", filter = 3)
image_binary(img, "R/(G/B)", filter = 3) |> image_export("binary.png")
library(metan)
library(rio)
library(tidyverse)
df <-
import('https://docs.google.com/spreadsheets/d/1axqbQosr-8sX4RnJi9vs4LGTZ8SkqZ28ZEquKei-iIg/edit#gid=1494000946',
dec=',') |>
fill_na() %>%
pivot_longer(cols = 5:9,
names_to = "dia",
values_to = "altura") %>%
mutate(das = case_when(
dia == "16/09" ~ 7,
dia == "23/09" ~ 14,
dia == "27/09" ~ 18,
dia == "04/10" ~ 25,
dia == "07/10" ~ 28,
),
tratamento = factor(tratamento))
medias <-
df %>%
group_by(das, tratamento) %>%
desc_stat(altura,
stats = c("mean, ci.t, n"))
desc_st
# ALTURA DE PLANTA (EVOLUÇÃO)
df <-
import('https://docs.google.com/spreadsheets/d/1axqbQosr-8sX4RnJi9vs4LGTZ8SkqZ28ZEquKei-iIg/edit#gid=1494000946',
dec=',') |>
fill_na() %>%
pivot_longer(cols = 5:9,
names_to = "dia",
values_to = "altura") %>%
mutate(das = case_when(
dia == "16/09" ~ 7,
dia == "23/09" ~ 14,
dia == "27/09" ~ 18,
dia == "04/10" ~ 25,
dia == "07/10" ~ 28,
),
tratamento = factor(tratamento))
medias <-
df %>%
group_by(das, tratamento) %>%
desc_stat(altura,
stats = c("mean, ci.t, n"))
ggplot(medias, aes(das,  mean, color = tratamento)) +
geom_point(position = position_dodge(width = 1)) +
geom_line(position = position_dodge(width = 1)) +
theme_bw() +
geom_errorbar(aes(ymax = mean + ci.t,
ymin = mean - ci.t),
width = 1,
position = position_dodge(width = 1))
df2 <-
import('https://docs.google.com/spreadsheets/d/1axqbQosr-8sX4RnJi9vs4LGTZ8SkqZ28ZEquKei-iIg/edit#gid=1786482827',
dec=',') |>
separate(TRAT, into = c("TRAT", "REP"))
View(df2)
media_var <-
df2 %>%
group_by(TRAT) %>%
desc_stat(CPA:NF,
stats = c("mean, ci.t, sd.amo, n"))
ggplot(media_var, aes(TRAT, mean)) +
geom_col(fill = "steelblue") +
geom_errorbar(aes(ymin = mean - sd.amo,
ymax = mean + sd.amo),
width = 0.5) +
facet_wrap(~variable, scales = "free", ncol = 5) +
theme_bw()
ggplot(media_var, aes(TRAT, mean)) +
geom_col(fill = "steelblue") +
geom_errorbar(aes(ymin = mean - ci.t,
ymax = mean + ci.t),
width = 0.5) +
facet_wrap(~variable, scales = "free", ncol = 5) +
theme_bw()
View(df2)
## ANOVA RAIZ
med <- df2 |> mean_by(TRAT, REP, .vars = CPA:NF)
View(med)
View(med)
View(med)
cpa <- med |> select(TRAT, REP, CPA)
View(cpa)
mat <- cpa |> pivot_wider(names_from = REP,
values_from = CPA)
View(mat)
mat <- cpa |> pivot_wider(names_from = REP,
values_from = CPA) |>
column_to_last("TRAT")
View(mat)
mat <- cpa |> pivot_wider(names_from = REP,
values_from = CPA) |>
column_to_rownames("TRAT")
View(mat)
soma <- row_col_sum(mat)
View(soma)
View(soma)
View(df2)
View(soma)
# FATOR DE CORREÇÃO
I <- 4
J <- 3
View(mat)
sum(mat)
sum(mat)^2
C <- sum(mat)^2 / (I*J)
C
C <- sum(mat)^2 / I*J
C <- sum(mat)^2 / (I*J)
mat
mat^2
mat^2 |> sum()
# SOMA DE QUADRADOS TOTAL
sqtot <- sum(mat^2)
sqtot
# SOMA DE QUADRADOS TOTAL
sqtot <- sum(mat^2) - C
sqtot
View(soma)
soma[,4]
soma[,4][-5]
View(mat)
apply(mat, 1, sum)
apply(mat, 1, sum)^2
(apply(mat, 1, sum)^2) / J
(apply(mat, 1, sum)^2)
(apply(mat, 1, sum)^2) |> sum()
((apply(mat, 1, sum)^2) |> sum()) / J
# SOMA DE QUDRADO DE TRATAMENTO
sqtrat <- ((apply(mat, 1, sum)^2) |> sum()) / J - C
sqtrat
sqtrat
sqtot
# SOMA DE QUADRADO DE ERRO
sqerr <- sqtot - sqtrat
gltot <- I*J-1
gltrat <- I-1
qmerr <- I*(j-1)
qmerr <- I*(J-1)
qmerr
glerr <- I*(J-1)
# SOMA DE QUADRADO DE ERRO
sqerr <- sqtot - sqtrat
glerr <- I*(J-1)
qmtrat <- sqtrat / gltrat
qmerr <- sqerr / glerr
qmtot <- sqtot / gltot
qmtrat
as.matrix(mat)
as.matrix(mat) |> c()
var(as.matrix(mat) |> c())
# F CALCULADO
fc <- qmtrat / qmerr
View(med)
View(cpa)
View(cpa)
## ANOVA NUTELA
mod <- aov(CPA ~ TRAT, data = cpa)
summary(mod)
f_dist <- function(gl_trat,
gl_erro,
alpha_des = 0.05,
alpha_obs = NULL){
if (is.null(alpha_obs)){
alpha_obs <- alpha_des
}
library(glue)
xl <- qf(p = 1 - 0.05, df1 = gl_trat, df2 = gl_erro, ncp=0) + 6
df <- data.frame(X = seq(from = 0, to = xl, length = 1000))
ftab <- round(xl - 6, 3)
ftab <- glue("F tabelado: {ftab}")
p <-
ggplot(data = df, mapping=aes(x = X, y = df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=0)))+
scale_x_continuous(breaks=seq(0, xl, 1))+
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
geom_area(data = subset(df, X > qf(p = 1 - alpha_obs, df1 = gl_trat, df2 = gl_erro, ncp=0)),
aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
fill = "red",
alpha = 0.7) +
geom_area(data = subset(df, X > qf(p = 1-alpha_des, df1 = gl_trat, df2 = gl_erro, ncp=0)),
aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
fill = "green",
alpha = 0.7) +
geom_area(aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
color="black", fill="blue", alpha = 0.1)+
labs(x = "Valor do teste F", y = "Probabilidade acumulada") +
theme(panel.grid.minor = element_blank()) +
ggtitle("Função densidade da distribuição F",
subtitle = glue("GLtrat: {gl_trat}; GLerro: {gl_erro}; {ftab}")) +
theme_gray(base_size = 18) +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank())
plot(p)
}
f_dist(3, 8, 0.05, 6.86e-05)
f_dist(3, 8, 0.05, 0.1)
f_dist(3, 8, 0.05, 0.01)
## ANOVA NUTELA
mod <- aov(CPA ~ TRAT, data = med)
summary(mod)
View(med)
## ANOVA NUTELA
mod <- aov(CPR ~ TRAT, data = med)
summary(mod)
f_dist(3, 8, 0.05, 0.407)
ggplot(media_var, aes(TRAT, mean)) +
geom_col(fill = "steelblue") +
geom_errorbar(aes(ymin = mean - ci.t,
ymax = mean + ci.t),
width = 0.5) +
facet_wrap(~variable, scales = "free", ncol = 5) +
theme_bw()
## ANOVA NUTELA
mod <- aov(MPA ~ TRAT, data = med)
summary(mod)
## ANOVA NUTELA
mod <- aov(MPR ~ TRAT, data = med)
summary(mod)
## ANOVA NUTELA
mod <- aov(NR ~ TRAT, data = med)
summary(mod)
## ANOVA NUTELA
mod <- aov(NF ~ TRAT, data = med)
summary(mod)
## ANOVA NUTELA
library(AgroR)
with(med, DIC(TRAT, NF))
## ANOVA NUTELA
mod <- aov(CPA ~ TRAT, data = med)
with(med, DIC(CPA, NF))
with(med, DIC(TRAT, CPA))
with(med, DBC(TRAT, REP, CPA))
library(rio)
library(metan)
library(tidyverse)
df <- import("https://docs.google.com/spreadsheets/d/1vpVGdIkggRxmdnwrkllHbVA0TIHN85UK/edit#gid=1486281449",
dec = ",")
mat <-
df |>
pivot_wider(names_from = BLOCO,
values_from = RG) |>
column_to_rownames("HIBRIDO") |>
as.matrix()
sums <- row_col_sum(mat)
C <- sum(mat)^2 / 20
I <- 5
J <- 4
# soma de quadrados total
sqtot <- (mat^2 |> sum()) - C
# soma de quadrados de tratamento
sqt <- ((apply(mat, 1, sum)^2 |> sum())/4)-C
# quadrado médio de tratamento
qmt <- sqt / (I-1)
# soma de quadrados de erro
sqe <- sqtot - sqt
# quadrado médio do erro
qme <- sqe / (I*(J-1))
# variancia
sqtot / 19
# F calculado
fcal <- qmt / qme
fcal
I*J-1
# variancia
sqtot / I*J-1
sqtot
# variancia
sqtot / (I*J-1)
ggplot(df, aes(HIBRIDO, RG))+
geom_col(aes(fill = BLOCO),
position = position_dodge()) +
stat_summary(geom = "point",
fun = mean,
shape  = 3)
# GRÁFICO MOSTRANDO A MÉDIA DE CADA HÍBRIDO E BLOCO
ggplot(df, aes(HIBRIDO, RG))+
geom_col(aes(fill = BLOCO),
position = position_dodge()) +
stat_summary(geom = "point",
fun = mean,
shape  = 3)
ggplot(df, aes(BLOCO, RG))+
geom_boxplot() +
stat_summary(geom = "point",
fun = mean,
shape  = 3)
# MÉDIAS DE CADA BLOCO
ggplot(df, aes(BLOCO, RG))+
geom_boxplot() +
stat_summary(geom = "point",
fun = mean,
shape  = 3)
# anova com a função aov()
mod <- aov(RG ~ HIBRIDO, data = df)
summary(mod)
# FUNÇÃO PARA PLOTAR A DISTRIBUIÇÃO F
f_dist <- function(gl_trat,
gl_erro,
alpha_des = 0.05,
alpha_obs = NULL){
if (is.null(alpha_obs)){
alpha_obs <- alpha_des
}
library(glue)
xl <- qf(p = 1 - 0.05, df1 = gl_trat, df2 = gl_erro, ncp=0) + 6
df <- data.frame(X = seq(from = 0, to = xl, length = 1000))
ftab <- round(xl - 6, 3)
ftab <- glue("F tabelado: {ftab}")
p <-
ggplot(data = df, mapping=aes(x = X, y = df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=0)))+
scale_x_continuous(breaks=seq(0, xl, 1))+
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
geom_area(data = subset(df, X > qf(p = 1 - alpha_obs, df1 = gl_trat, df2 = gl_erro, ncp=0)),
aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
fill = "red",
alpha = 0.7) +
geom_area(data = subset(df, X > qf(p = 1-alpha_des, df1 = gl_trat, df2 = gl_erro, ncp=0)),
aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
fill = "green",
alpha = 0.7) +
geom_area(aes(x=X, y=df(x = X, df1 = gl_trat, df2 = gl_erro, ncp=2)),
color="black", fill="blue", alpha = 0.1)+
labs(x = "Valor do teste F", y = "Probabilidade acumulada") +
theme(panel.grid.minor = element_blank()) +
ggtitle("Função densidade da distribuição F",
subtitle = glue("GLtrat: {gl_trat}; GLerro: {gl_erro}; {ftab}")) +
theme_gray(base_size = 18) +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank())
plot(p)
}
fcal
pf(fcal, 4, 15, lower.tail = FALSE)
# valor de erro acumulado até no F calculado
alpha_obs <- pf(fcal, 4, 15, lower.tail = FALSE)
f_dist(gl_trat = 4,
gl_erro = 15,
alpha_des = 0.05,
alpha_obs = alpha_obs) # erro assumido
